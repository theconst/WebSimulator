<xs:schema attributeFormDefault="unqualified" 
           elementFormDefault="qualified" 
           xmlns:xs="http://www.w3.org/2001/XMLSchema">
    
    <!-- xml schema to validate the assignment -->  
    <!-- Feature: order of items is enforced -->
    <!-- Feature: Negative feedback can contain more than one item -->
    <!-- Feature: id's for simle items are not used, but required -->
    
    <xs:simpleType name="posfloat">
        <xs:restriction base="xs:float">
            <xs:minInclusive value="0.0"/>
        </xs:restriction>
    </xs:simpleType>
  
    <!-- dynamic items of simple types -->
    <xs:complexType name="lag">
        <xs:simpleContent>
            <xs:extension base="xs:string">
                <xs:attribute type="xs:string" name="id" use="required"/>
                <xs:attribute type="xs:float" name="initial" use="required"/>
                <xs:attribute type="xs:float" name="gain" use="required" />
                <xs:attribute type="xs:float" name="timeConstant" use="required" />
            </xs:extension>
        </xs:simpleContent>
    </xs:complexType>
    
    <xs:complexType name="delay">
        <xs:simpleContent>
            <xs:extension base="xs:string">
                <xs:attribute type="xs:string" name="id" use="required" />
                <xs:attribute type="xs:float" name="initial" use="required" />
                <xs:attribute type="posfloat" name="time" use="required" />
            </xs:extension>
        </xs:simpleContent>
    </xs:complexType>
  
    
    <xs:complexType name="noise">
        <xs:simpleContent>
            <xs:extension base="xs:string">
                <xs:attribute type="xs:string" name="id" use="required"/>
                <xs:attribute type="xs:float" name="initial" use="required" />
                <xs:attribute type="posfloat" name="variance" use="required" />
            </xs:extension>
        </xs:simpleContent>
    </xs:complexType>
    
    <xs:complexType name="folpdn">
        <xs:simpleContent>
            <xs:extension base="xs:string">
                <xs:attribute type="xs:string" name="id" use="required"/>
                <xs:attribute type="xs:float" name="initial" use="required"/>
                <xs:attribute type="xs:float" name="gain" use="required"/>
                <xs:attribute type="xs:float" name="timeConstant" use="required"/>
                <xs:attribute type="posfloat" name="delay" use="required"/>
                <xs:attribute type="xs:float" name="variance" use="optional" default="0.0" />
            </xs:extension>
        </xs:simpleContent>
    </xs:complexType>
  
    <xs:complexType name="pid">
        <xs:simpleContent>
            <xs:extension base="xs:string">
                <xs:attribute type="xs:string" name="id" use="required"/>
                <xs:attribute type="xs:float" name="initial" use="required"/>
                <xs:attribute type="xs:float" name="p" use="optional" default="1.0"/>
                <xs:attribute type="xs:float" name="i" use="optional" default="0.0"/>
                <xs:attribute type="xs:float" name="d" use="optional" default="0.0"/>
            </xs:extension>
        </xs:simpleContent>
    </xs:complexType>
    
  
    <!-- A dynamic item is either a simple item or a complex connection of items -->
    <xs:complexType name="complexitem">
        <xs:sequence>
            <xs:element name="pid" type="pid" minOccurs="0" maxOccurs="unbounded"/>
            <xs:element name="lag" type="lag" minOccurs="0" maxOccurs="unbounded"/>
            <xs:element name="delay" type="delay" minOccurs="0" maxOccurs="unbounded"/>
            <xs:element name="noise" type="noise" minOccurs="0" maxOccurs="unbounded"/>
            <xs:element name="folpdn" type="folpdn" minOccurs="0" maxOccurs="unbounded"/>
            <xs:element name="sequentialConnection" type="complexitem" minOccurs="0" maxOccurs="unbounded" />
            <xs:element name="parallelConnection" type="complexitem" minOccurs="0" maxOccurs="unbounded" />
            <xs:element name="negativeFeedback" type="complexitem" minOccurs="0" maxOccurs="unbounded" />
        </xs:sequence>
    </xs:complexType>
  
    <!-- transfer function is either a simple item or some connection of items -->
    
    <xs:complexType name="transferFunction">
        <xs:choice>
            <xs:element name="lag" type="lag" />
            <xs:element name="delay" type="delay" />
            <xs:element name="noise" type="noise" />
            <xs:element name="pid" type="pid" />
            <xs:element name="folpdn" type="folpdn" />
            <xs:element name="sequentialConnection" type="complexitem" />
            <xs:element name="parallelConnection" type="complexitem" />
            <xs:element name="negativeFeedback" type="complexitem" />
        </xs:choice>
      
        <xs:attribute type="xs:string" name="id" use="required"/>
    </xs:complexType>
    
  
    <!-- input has just an id (internal representation) and a name (how the client should access this attribute) -->
    <xs:complexType name="input">
        <xs:simpleContent>
            <xs:extension base="xs:string">
                <xs:attribute type="xs:string" name="id" use="required"/>
                <xs:attribute type="xs:string" name="name" use="required"/>
                <xs:attribute type="xs:float" name="initial" use="required" />
                <xs:attribute type="xs:float" name="min" use="required" />
                <xs:attribute type="xs:float" name="max" use="required" />
            </xs:extension>
        </xs:simpleContent>
    </xs:complexType>
  
    <!-- output has just an id (internal representation) and a name (how the client should access this attribute) --> 
    <xs:complexType name="output">
        <xs:simpleContent>
            <xs:extension base="xs:string">
                <xs:attribute type="xs:string" name="id" use="required"/>
                <xs:attribute type="xs:string" name="name" use="required"/>
                <xs:attribute type="xs:float" name="initial" use="optional" default="0"/>
                <xs:attribute type="xs:float" name="alarmLow" use="required" />
                <xs:attribute type="xs:float" name="alarmLowCritical" use="required" />
                <xs:attribute type="xs:float" name="alarmHi" use="required" />
                <xs:attribute type="xs:float" name="alarmHiCritical" use="required" />
            </xs:extension>
        </xs:simpleContent>
    </xs:complexType>
   
  
    <!-- relationship defines a transfer function from input to ouput -->
    <xs:complexType name="relationship">
        <xs:simpleContent>
            <xs:extension base="xs:string">
                <xs:attribute type="xs:string" name="input" use="required"/>
                <xs:attribute type="xs:string" name="output" use="required"/>
                <xs:attribute type="xs:string" name="function" use="required"/>
            </xs:extension>
        </xs:simpleContent>
    </xs:complexType>
  
    <!-- declare transfer functions used in model -->
    <xs:complexType name="transferFunctions">
        <xs:sequence>
            <xs:element name="transferFunction" type="transferFunction" 
                        minOccurs="1" maxOccurs="unbounded" />
        </xs:sequence>
    </xs:complexType>
  
    <!-- declare inputs id's used in the model -->
    <xs:complexType name="inputs">
        <xs:choice minOccurs="1" maxOccurs="unbounded" >
            <xs:element name="input" type="input" />
        </xs:choice>
    </xs:complexType>
  
    <!-- declare outputs used in the model -->
    <xs:complexType name="outputs">
        <xs:sequence>
            <xs:element name="output" type="output"  minOccurs="1" 
                        maxOccurs="unbounded"/>
        </xs:sequence>
    </xs:complexType>
  
    <!-- relationships = itput -> transferFunction -> output -->
    <xs:complexType name="relationships">
        <xs:sequence>
            <xs:element name="relationship" type="relationship" 
                        maxOccurs="unbounded" minOccurs="1"/>
        </xs:sequence>
    </xs:complexType>
  
  
    <!-- root element of the document -->
    <!-- assignment consists of ONE comment (optionally) and ONE model -->
    <xs:element name="assignment">
        <xs:complexType>
            <xs:all>
        
                <!-- optional comment -->
                <xs:element name="comment" type="xs:string" />
        
                <!-- dynamic model definition -->
                <xs:element name="model" minOccurs="1">
                    <xs:complexType>
                        <xs:sequence>
                            <xs:element name="transferFunctions"
                                        type="transferFunctions" minOccurs="1" maxOccurs="1" />
                            <xs:element name="inputs"
                                        type="inputs" minOccurs="1" maxOccurs="1" />
                            <xs:element name="outputs"
                                        type="outputs" minOccurs="1" maxOccurs="1" />
                            <xs:element name="relationships"
                                        type="relationships" minOccurs="1" maxOccurs="1" />
                        </xs:sequence>
                        <xs:attribute type="xs:float" name="sampling" use="required" />
                    </xs:complexType>
    
                    <!-- define id's as keys -->
                    <xs:key name = "outputsKey" >
                        <xs:selector xpath="outputs/output"/>
                        <xs:field xpath="@id"/>
                    </xs:key>
                    <xs:key name = "inputsKey" >
                        <xs:selector xpath="inputs/input"/>
                        <xs:field xpath="@id"/>
                    </xs:key>
                    <xs:key name = "transferFunctionsKey" >
                        <xs:selector xpath="transferFunctions/transferFunction" />
                        <xs:field xpath="@id"/>
                    </xs:key>
  
                    <!-- define input and output as a key for a relationship -->
                    <!-- prevent user from accidentely specifying wrong key -->
                    <xs:key name="relationshipKey">
                        <xs:selector xpath="relationships/relationship" />
                        <xs:field xpath="@input" />
                        <xs:field xpath="@output" />
                    </xs:key>
        
                    <!-- temporary solution because of implementation reasons -->
                    <xs:unique name="relationshipUniqueFunction">
                        <xs:selector xpath="relationships/relationship" />
                        <xs:field xpath="@function" />
                    </xs:unique>
        
                    <!-- define foreign keys -->
                    <xs:keyref name="transferFunctionFK" refer="transferFunctionsKey">
                        <xs:selector xpath="relationships/relationship" />
                        <xs:field xpath = "@function" />
                    </xs:keyref>
    
                    <xs:keyref name="inputsFK" refer="inputsKey">
                        <xs:selector xpath="relationships/relationship" />
                        <xs:field xpath = "@input" />
                    </xs:keyref>
    
                    <xs:keyref name="outputsFK" refer="outputsKey">
                        <xs:selector xpath="relationships/relationship" />
                        <xs:field xpath = "@output" />
                    </xs:keyref>
                    <!-- end of foreign keys -->
                </xs:element>
            </xs:all>
      
            <!-- variant for the assignment -->
            <xs:attribute type="xs:byte" name="variant" use="required" />
        </xs:complexType>
    </xs:element>
   
</xs:schema>